name: CMake
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
jobs:
  # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
  # You can convert this to a matrix build if you need cross-platform coverage.
  # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  Run-cmake-on-Ubuntu:
    name: Run cmake on Ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: configure cmake
        # configure cmake in a 'build' subdirectory. `cmake_build_type` is only required if you are using a single-configuration generator such as make.
        # see https://cmake.org/cmake/help/latest/variable/cmake_build_type.html?highlight=cmake_build_type
        run: cmake -b ${{github.workspace}}/build -dcmake_build_type=${{env.build_type}}
      - name: build
        # build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.build_type}}
  Run-cmake-on-Window:
    name: Run cmake on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: configure cmake
        # configure cmake in a 'build' subdirectory. `cmake_build_type` is only required if you are using a single-configuration generator such as make.
        # see https://cmake.org/cmake/help/latest/variable/cmake_build_type.html?highlight=cmake_build_type
        run: cmake -b ${{github.workspace}}/build -dcmake_build_type=${{env.build_type}}
      - name: build
        # build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.build_type}}
